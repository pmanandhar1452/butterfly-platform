import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  FlatList,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Calendar, Clock, Plus, MoveVertical as MoreVertical, CreditCard as Edit3, Trash2 } from 'lucide-react-native';

export default function ScheduleScreen() {
  const [selectedFilter, setSelectedFilter] = useState('all');

  const filters = [
    { id: 'all', label: 'All Posts', count: 12 },
    { id: 'scheduled', label: 'Scheduled', count: 8 },
    { id: 'draft', label: 'Drafts', count: 4 },
    { id: 'published', label: 'Published', count: 24 },
  ];

  const scheduledPosts = [
    {
      id: 1,
      content: 'Exciting announcement about our latest AI features! ðŸš€',
      scheduledTime: 'Today, 2:00 PM',
      status: 'scheduled',
      engagement: 'Estimated reach: 2.5K',
      model: 'GPT-4',
    },
    {
      id: 2,
      content: 'Weekly industry insights and market trends...',
      scheduledTime: 'Tomorrow, 9:00 AM',
      status: 'scheduled',
      engagement: 'Estimated reach: 3.2K',
      model: 'Gemini Pro',
    },
    {
      id: 3,
      content: 'Behind the scenes of our development process',
      scheduledTime: 'Draft',
      status: 'draft',
      engagement: 'Not scheduled',
      model: 'Claude 3',
    },
    {
      id: 4,
      content: 'Thank you to our amazing community for the support!',
      scheduledTime: 'Dec 25, 10:00 AM',
      status: 'scheduled',
      engagement: 'Estimated reach: 4.1K',
      model: 'GPT-4',
    },
  ];

  const filteredPosts = scheduledPosts.filter((post) => {
    if (selectedFilter === 'all') return true;
    return post.status === selectedFilter;
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'scheduled':
        return '#F59E0B';
      case 'draft':
        return '#64748B';
      case 'published':
        return '#10B981';
      default:
        return '#64748B';
    }
  };

  const renderPostCard = ({ item }: { item: any }) => (
    <View style={styles.postCard}>
      <View style={styles.postHeader}>
        <View style={styles.postInfo}>
          <View
            style={[styles.statusDot, { backgroundColor: getStatusColor(item.status) }]}
          />
          <Text style={styles.scheduledTime}>{item.scheduledTime}</Text>
        </View>
        <TouchableOpacity style={styles.menuButton}>
          <MoreVertical size={16} color="#64748B" />
        </TouchableOpacity>
      </View>

      <Text style={styles.postContent} numberOfLines={3}>
        {item.content}
      </Text>

      <View style={styles.postMeta}>
        <Text style={styles.engagement}>{item.engagement}</Text>
        <Text style={styles.model}>Generated by {item.model}</Text>
      </View>

      <View style={styles.postActions}>
        <TouchableOpacity style={styles.actionButton}>
          <Edit3 size={16} color="#0077B5" />
          <Text style={styles.actionText}>Edit</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.actionButton}>
          <Clock size={16} color="#8B5CF6" />
          <Text style={styles.actionText}>Reschedule</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.actionButton}>
          <Trash2 size={16} color="#EF4444" />
          <Text style={styles.actionText}>Delete</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Schedule</Text>
        <TouchableOpacity style={styles.addButton}>
          <Plus size={20} color="#FFFFFF" />
        </TouchableOpacity>
      </View>

      {/* Filters */}
      <ScrollView
        horizontal
        showsHorizontalScrollIndicator={false}
        style={styles.filtersContainer}
        contentContainerStyle={styles.filtersContent}>
        {filters.map((filter) => (
          <TouchableOpacity
            key={filter.id}
            style={[
              styles.filterButton,
              selectedFilter === filter.id && styles.selectedFilterButton,
            ]}
            onPress={() => setSelectedFilter(filter.id)}>
            <Text
              style={[
                styles.filterText,
                selectedFilter === filter.id && styles.selectedFilterText,
              ]}>
              {filter.label}
            </Text>
            <View
              style={[
                styles.filterBadge,
                selectedFilter === filter.id && styles.selectedFilterBadge,
              ]}>
              <Text
                style={[
                  styles.filterBadgeText,
                  selectedFilter === filter.id && styles.selectedFilterBadgeText,
                ]}>
                {filter.count}
              </Text>
            </View>
          </TouchableOpacity>
        ))}
      </ScrollView>

      {/* Calendar View Toggle */}
      <View style={styles.viewToggle}>
        <TouchableOpacity style={styles.viewButton}>
          <Calendar size={16} color="#0077B5" />
          <Text style={styles.viewButtonText}>Calendar View</Text>
        </TouchableOpacity>
      </View>

      {/* Posts List */}
      <FlatList
        data={filteredPosts}
        renderItem={renderPostCard}
        keyExtractor={(item) => item.id.toString()}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.postsContainer}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#1E293B',
  },
  addButton: {
    backgroundColor: '#8B5CF6',
    padding: 8,
    borderRadius: 8,
  },
  filtersContainer: {
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
  },
  filtersContent: {
    paddingHorizontal: 20,
    paddingVertical: 16,
    gap: 12,
  },
  filterButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#F1F5F9',
    gap: 8,
  },
  selectedFilterButton: {
    backgroundColor: '#0077B5',
  },
  filterText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#64748B',
  },
  selectedFilterText: {
    color: '#FFFFFF',
  },
  filterBadge: {
    backgroundColor: '#E2E8F0',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 10,
  },
  selectedFilterBadge: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
  },
  filterBadgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#64748B',
  },
  selectedFilterBadgeText: {
    color: '#FFFFFF',
  },
  viewToggle: {
    paddingHorizontal: 20,
    paddingVertical: 12,
  },
  viewButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    alignSelf: 'flex-start',
  },
  viewButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#0077B5',
  },
  postsContainer: {
    padding: 20,
    gap: 16,
  },
  postCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 3,
  },
  postHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  postInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  statusDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  scheduledTime: {
    fontSize: 12,
    fontWeight: '600',
    color: '#64748B',
  },
  menuButton: {
    padding: 4,
  },
  postContent: {
    fontSize: 14,
    lineHeight: 20,
    color: '#1E293B',
    marginBottom: 12,
  },
  postMeta: {
    marginBottom: 16,
  },
  engagement: {
    fontSize: 12,
    color: '#10B981',
    fontWeight: '500',
    marginBottom: 4,
  },
  model: {
    fontSize: 11,
    color: '#8B5CF6',
    fontWeight: '500',
  },
  postActions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#F1F5F9',
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  actionText: {
    fontSize: 12,
    fontWeight: '500',
    color: '#64748B',
  },
});